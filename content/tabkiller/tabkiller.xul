<?xml version="1.0"?>

<?xml-stylesheet href="chrome://tabkiller/content/tabkiller.css" type="text/css"?>
<?xml-stylesheet href="chrome://tabkiller/locale/tabkiller.css" type="text/css"?>

<overlay xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">

<script type="application/x-javascript"><![CDATA[

function killTabbrowser()
{
	if ('TabbrowserService' in window && !TabbrowserService.initialized)
		window.setTimeout(killTabbrowser, 0);

	var b = document.getElementById('content');
	if ('__tabkiller__initialized' in b) return;


	try {
		if (b.mPrefs.getBoolPref('tabkiller.disabled')) {
			b.__tabkiller__initialized = true;
			document.documentElement.removeAttribute('tabkiller-enabled');
			return;
		}
	}
	catch(e) {
		b.mPrefs.setBoolPref('tabkiller.disabled', false);
	}

	document.documentElement.setAttribute('tabkiller-enabled', true);


	for (var i = 0; i < b.mTabContainer.childNodes.length; i++)
		if (b.mTabContainer.childNodes[i] != b.selectedTab)
			b.removeTab(b.mTabContainer.childNodes[i]);

	b.mStrip.collapsed = true;
	b.mStrip.hidden    = true;

	var originalAddTab    = b.addTab;
	var originalRemoveTab = b.removeTab;

	b.addTab = function(aURI, aReferrer, aCharset)
	{
		if (window.__tabkiller__tempDisabled) {
			return originalAddTab.apply(this, arguments);
		}

		var browserURI = location.href;
		var openWindow;
		try {
			openWindow = this.mPrefs.getBoolPref('tabkiller.openWindowInsteadOfTab');
		}
		catch(e) {
			openWindow = true;
		}

		if (
			openWindow &&
			'TabbrowserService' in window &&
			TabbrowserService.winHookMode > 0
			) {
			var w = arguments.callee.caller;
			do {
				w = w.__parent__;
			}
			while (w.__parent__);
			if (w != window && w.location.href == browserURI)
				openWindow = false;
		}

		if (openWindow) {
			window.openDialog(browserURI, '_blank', 'chrome,all,dialog=no', aURI, aCharset, aReferrer);
		}
		else {
			this.loadURI(aURI, aReferrer, aCharset);
		}
		return this.selectedTab;
	};

	b.removeTab = function(aTab) {
		if (window.__tabkiller__tempDisabled) {
			return originalRemoveTab.apply(this, arguments);
		}

		var closeWindow;
		try {
			closeWindow = this.mPrefs.getBoolPref('tabkiller.closeWindowInsteadOfTab');
		}
		catch(e) {
			closeWindow = true;
		}
		if (closeWindow) {
			if ('TryToCloseWindow' in window)
				window.TryToCloseWindow();
			else if ('TryToCloseBrowserWindow' in window)
				window.TryToCloseBrowserWindow();
			else
				window.close();
		}
		return aTab;
	};
	b.setStripVisibilityTo = function(aShow) {};
	b.getStripVisibility = function() { return false; }


	if ('nsISessionStore' in Components.interfaces) {
		eval(
			'window.closeWindow = '+
			window.closeWindow.toSource().replace(
				/\{/i,
				'{ window.__tabkiller__addWindowToUndoCache();'
			)
		);
		eval(
			'window.undoCloseTab = '+
			window.undoCloseTab.toSource().replace(
				/ss.undoCloseTab\(/i,
				'window.__tabkiller__restoreWindowFromUndoCache('
			)
		);
	}


	if ('TabbrowserService' in window) {
		b.__tabextensions__addTab = b.addTab;
		b.__tabextensions__removeTab = b.removeTab;
	}


	b.__tabkiller__initialized = true;
}



function __tabkiller__disable()
{
	window.__tabkiller__tempDisabled = true;
	gBrowser.mStrip.collapsed = false;
	gBrowser.mStrip.hidden    = false;
};

function __tabkiller__enable()
{
	window.__tabkiller__tempDisabled = false;
	window.setTimeout(function() {
		gBrowser.mStrip.collapsed = true;
		gBrowser.mStrip.hidden    = true;
	}, 0);
};


function __tabkiller__addWindowToUndoCache()
{
	const WindowManager = Components.classes['@mozilla.org/appshell/window-mediator;1'].getService(Components.interfaces.nsIWindowMediator);
	var targets = WindowManager.getEnumerator('navigator:browser', true),
		target,
		windows = [];
	while (targets.hasMoreElements())
	{
		target = targets.getNext().QueryInterface(Components.interfaces.nsIDOMWindowInternal);
		if (target != window)
			windows.push(target);
	}

	if (!windows.length) return;

	const SS = Components.classes['@mozilla.org/browser/sessionstore;1']
				.getService(Components.interfaces.nsISessionStore);
	var state = SS.getWindowState(window);
	var title = gBrowser.selectedTab.getAttribute('label');

	var current;
	for (var i = 0; i < windows.length; i++)
	{
		windows[i].__tabkiller__disable();

		current = windows[i].gBrowser.selectedTab;
		SS.setWindowState(windows[i], state, false);

		var tabs = windows[i].gBrowser.mTabContainer.childNodes;
		for (var j = 0, maxj = tabs.length; j < maxj; j++)
			if (tabs[j] != current) tabs[j].setAttribute('label', title);

		windows[i].gBrowser.removeAllTabsBut(current);

		windows[i].__tabkiller__enable();
	}
}

function __tabkiller__restoreWindowFromUndoCache(aWindow, aIndex)
{
	__tabkiller__disable();

	const SS = Components.classes['@mozilla.org/browser/sessionstore;1']
				.getService(Components.interfaces.nsISessionStore);
	var current = gBrowser.selectedTab;

	SS.undoCloseTab(aWindow, aIndex);
	var state = SS.getWindowState(window);

	var tabs = gBrowser.mTabContainer.childNodes;
	for (var i = 0, maxi = tabs.length; i < maxi; i++)
		if (tabs[i] != current) break;

	if (tabs[i]) {
		var newWin = window.openDialog(location.href, '_blank', 'chrome,all,dialog=no', 'about:blank');
		newWin.addEventListener('load', function() {
			newWin.setTimeout(function() {
				newWin.__tabkiller__disable();
				var offset = newWin.gBrowser.mTabContainer.childNodes.length;
				SS.setWindowState(newWin, state, false);
				newWin.gBrowser.mTabContainer.childNodes[offset].setAttribute('label', current.getAttribute('label'));
				newWin.gBrowser.removeAllTabs(newWin.gBrowser.mTabContainer.childNodes[i+offset]);
				newWin.__tabkiller__enable();
			}, 0);
		}, false);
	}
	gBrowser.removeAllTabs(current);

	__tabkiller__enable();
}




window.addEventListener('load', killTabbrowser, false);
window.addEventListener('load', killTabbrowser, false);

]]></script>

</overlay>
